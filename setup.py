"""
This is a setup.py script generated by py2applet

Usage:
    python setup.py py2app
"""

import shutil
from setuptools import setup
import site
import os
import sys
import platform
import tkinter


def get_tcl_version() -> tuple[str, str]:
    tcl = tkinter.Tcl()
    try:
        patch_level = tcl.call("info", "patchlevel")
    finally:
        tcl.quit()

    return patch_level.split(".")[0], patch_level.split(".")[1]


TK_VERSION = tkinter.TkVersion
TCL_MAJOR_VERSION, TCL_MINOR_VERSION = get_tcl_version()

APP = ["main.py"]
DATA_FILES = [
    "experiment.py",
    "logger.py",
    "tsne.py",
    "renderer.py",
    "mnist.py",
    ("assets", ["assets/icon.png"]),
]
OPTIONS = {
    "iconfile": "assets/icon.png",
    "packages": {
        "tkinter",
        "charset_normalizer",
        "keyring",
        "jax_plugins",
    },
    "includes": {
        "tkinter",
    },
}

found = False
for sitepackages in site.getsitepackages():
    jax_plugins_path = os.path.join(sitepackages, "jax_plugins")
    if os.path.exists(jax_plugins_path):
        found = True
        break

if found:
    OPTIONS["packages"].add("jax_plugins")

jax_plugins_init_path = os.path.join(jax_plugins_path, "__init__.py")
init_exists = os.path.exists(jax_plugins_init_path)
if found and not init_exists:
    with open(jax_plugins_init_path, "w") as f:
        f.write("")

files_to_delete = []
try:
    try:
        if sys.platform == "darwin":
            # I needed to copy these files to the venv lib directory so that py2app
            # so that py2app could find them and package them into the app.
            major, minor, _ = platform.python_version_tuple()
            framework_lib = (
                f"/Library/Frameworks/Python.framework/Versions/{major}.{minor}/lib"
            )
            for libname in [
                f"tcl{TCL_MAJOR_VERSION}",
                f"tcl{TCL_MAJOR_VERSION}.{TCL_MINOR_VERSION}",
                f"tk{TK_VERSION}",
            ]:
                print(libname)
                libpath = os.path.join(framework_lib, libname)
                if not os.path.exists(libpath):
                    raise RuntimeError(f"Cannot find {libname}, expected at {libpath}")
                # else...
                path = os.path.join(sys.exec_prefix, "lib", libname)
                files_to_delete.append(path)
                shutil.copytree(libpath, path)
        setup(
            name="MNIST-VAE",
            app=APP,
            data_files=DATA_FILES,
            options={"py2app": OPTIONS},
            setup_requires=["py2app"],
        )
    finally:
        if sys.platform == "darwin":
            for path in files_to_delete:
                if os.path.exists(path):
                    shutil.rmtree(path)

finally:
    if found and not init_exists:
        os.remove(jax_plugins_init_path)
